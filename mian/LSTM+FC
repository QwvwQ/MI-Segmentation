# -*- coding: utf-8 -*-
"""
Created on Mon Dec 26 15:29:47 2016

@author: xu
"""


import pandas as pd
import seaborn as sns
import numpy as np
from sklearn.model_selection import train_test_split
import tools as utils

#from keras.datasets import mnist
from keras.models import Sequential,Model
from keras.layers import Dense, Activation,Dropout, Input,add
from keras.layers import SimpleRNN
from keras.initializations import normal, identity
from keras.optimizers import RMSprop
from keras.utils import np_utils
from keras.layers.recurrent import LSTM
from sklearn.metrics import roc_curve, auc
from sklearn.metrics import precision_recall_curve

#from keras.utils.visualize_util import plot

data_dim = 121
timesteps = 25
nb_classes = 2

#train = os.path.join('H:\MI', train)

datafrme_train = np.load('11x11_train.npy')
datafrme_test = np.load('11x11_test.npy')

datafrme_train = datafrme_train.astype('float32')
datafrme_test = datafrme_test.astype('float32')

X_train=datafrme_train.iloc[:,1:3026]
Y_train=datafrme_train.iloc[:,0]

X_test=datafrme_test.iloc[:,1:3026]
Y_test=datafrme_test.iloc[:,0]

X_train /= 255
X_test /= 255

X_train = X_train.reshape(X_train.shape[0],timesteps, data_dim)
X_test = X_test.reshape(X_test.shape[0],timesteps, data_dim)


flow_train = np.load('flow_train.npy')
flow_test = np.load('flow_test.npy')

flow_train = flow_train.astype('float32')
flow_test = flow_test.astype('float32')


print('X_train shape:', X_train.shape)
print(X_train.shape[0], 'train samples')
print(X_test.shape[0], 'test samples')

# convert class vectors to binary class matrices
Y_train[Y_train==2]=0
Y_test[Y_test==2]=0
Y_train = np_utils.to_categorical(Y_train)
Y_test = np_utils.to_categorical(Y_test)

#%%  

# expected input data shape: (batch_size, timesteps, data_dim)

input1 = Input(shape=(timesteps, data_dim))
x1 = LSTM(121, return_sequences=True)(input1)
x1 = LSTM(32, return_sequences=True)(x1)
x1 = Dropout(0.1)(x1)
x1 = LSTM(32)(x1)
input2 = Input(shape=(32,))
x2 = Dense(32)(input2)
added = add([x1, x2])
out = Dense(2, activation='softmax')(added)

model =Model(inputs=[input1, input2], outputs=out)

model.compile(loss='categorical_crossentropy',
              optimizer='rmsprop',
              metrics=['accuracy'])

hist=model.fit([X_train, flow_train],Y_train,batch_size=32, nb_epoch=800,verbose=2)

json_string = model.to_json()  
open('my_model_architecture.json','w').write(json_string)  
model.save_weights('my_model_weights.h5')  

y_score = model.predict(X_test)

np.savetxt('y_score.txt',y_score)
np.savetxt('y_test.txt',Y_test)
utils.plothistory(hist)
#model.get_config()
#model.summary()

fpr, tpr, _ = roc_curve(Y_test[:,0], y_score[:,0])
roc_auc = auc(fpr, tpr)

precision, recall, _ = precision_recall_curve(Y_test[:,0], y_score[:,0])
roc_auc = auc(fpr, tpr)

np.savetxt('fpr.txt',fpr)
np.savetxt('tpr.txt',tpr)
np.savetxt('precision.txt',precision)
np.savetxt('recall.txt',recall)

utils.draw_roc(Y_test, y_score)
utils.draw_pr(Y_test, y_score)

y_score=np_utils.categorical_probas_to_classes(y_score) 
Y_test=np_utils.categorical_probas_to_classes(Y_test) 
acc, precision, sensitivity, specificity, MCC = utils.calculate_performace(len(y_score), y_score,Y_test)
print(acc, precision, sensitivity, specificity, MCC, roc_auc)

cvscores = []   
cvscores.append([acc, precision, sensitivity, specificity, MCC,roc_auc])
cvindex=pd.DataFrame(cvscores)
cvindex.to_csv("index.csv",index=None,header=None)



